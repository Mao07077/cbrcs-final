services:
  # Backend service
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: cbrcs-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - MONGO_URI=${MONGO_URI}
      - DATABASE_NAME=${DATABASE_NAME}
      - COLLECTION_NAME=${COLLECTION_NAME}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://frontend
    volumes:
      - backend-uploads:/app/uploads
      - backend-pictures:/app/picture
    depends_on:
      - mongo
    networks:
      - cbrcs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cbrcs-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - cbrcs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB service
  mongo:
    image: mongo:6.0
    container_name: cbrcs-mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: cbrc
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - cbrcs-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/cbrc --quiet
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo-data:
    driver: local
  backend-uploads:
    driver: local
  backend-pictures:
    driver: local

networks:
  cbrcs-network:
    driver: bridge
